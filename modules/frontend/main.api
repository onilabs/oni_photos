/* (c) 2013-2014 Oni Labs, http://onilabs.com
 *
 * This file is part of Conductance, http://conductance.io/
 *
 * It is subject to the license terms in the LICENSE file
 * found in the top-level directory of this distribution.
 * No part of Conductance, including this file, may be
 * copied, modified, propagated, or distributed except
 * according to the terms contained in the LICENSE file.
 */

/**
   @summary Main application API
   @desc
     **NB** To facilitate operation across temporary server disconnects, all
     functions exposed in the API should be idempotent.
*/


@ = require([
  'mho:std',
  {id: 'lib:app-info', name: 'app_info'},
  {id: 'mho:services/google_api/REST/picasawebV2', name: 'picasa'},
  {id: 'backend:db/users', name: 'users'},
  {id: 'backend:db/stories', name: 'stories'},
  {id: 'mho:server/random', name: 'random'}
]);

/**
   @variable api_version
   @summary API version
*/
exports.api_version = @app_info.version;

// google scopes we're authenticating with:
var google_scopes = [
  'https://picasaweb.google.com/data/'
];


/**
   @function loginGoogle
   @summary Perform a Google OAuth authentication
   @param {String} [origin] Pass `window.location.origin` here
   @param {Function} [redirect] Client-side redirect function that will receive the OAuth URL
   @return {String|false} Credentials string if the authentication was successful; `false` otherwise
*/
exports.loginGoogle = function(origin, redirect) {
  var authentication_scopes = google_scopes.concat(['openid email']);
  var google_oauth_session = @env('services').google_api_oauth.APISession();
  var google_tokens = google_oauth_session.promptUserAuthorization(authentication_scopes, redirect, origin);

  if (!google_tokens.id_token) return false;
  
  // parse the id token:
  try {
    // id_token is header.payload.signature - see https://tools.ietf.org/html/rfc7519
    var id_token = google_tokens.id_token.split('.')[1] .. @base64ToOctets .. @utf8ToString;
    // replace trailing '0' bytes
    id_token = id_token.replace(/\0+$/, '');
    id_token = id_token .. JSON.parse;
  }
  catch (e) {
    console.log("failure parsing id token (#{e})");
    return false;
  }
  if (!id_token.email) return false;


  // XXX the following two should be transactional!
  try {
    // ok, we've got an authenticated email. check if we've got an account for it already:
    var account = @users.findAccount(id_token.email);

    if (!account) {
      // nope -> let's create one with a random access token
      account = @users.createAccount({id: id_token.email,
                                      access_token: @random.createID()
                                     },
                                     {
                                       google_tokens: google_tokens
                                     });
    }
  }
  catch (e) {
    console.log("Error in finding/creating account (#{e})");
    return false;
  }
  
  return { id:    account.id,
           access_token: account.access_token
         } .. JSON.stringify;
  
};

/**
   @class Session
   @summary A user api session
   @function Session
   @param {String} [origin] Pass `window.location.origin` here
   @param {String} [credentials] Credentials string
   @summary Try to obtain a session for the given credentials
   @return {::Session} Session object, or throws if unsuccessful
*/
exports.Session = function(origin, credentials) {

  var user;
  if (!(user = @users.verifyAccount(credentials))) {
    throw new Error("Account verification failed");
  }  
  
  var google_oauth_session = @env('services').google_api_oauth.APISession(
    user .. @users.getCredentials('google_tokens')
  );


  return {
    /**
       @function Session.authorizeGoogle
       @param {Function} [redirect] client-side redirection function
       @summary Perform Google OAuth authorization to photos API (e.g. in case permissions were revoked - see [::Session::Authorized])
    */ 
    authorizeGoogle: function(redirect) {
      var rv = google_oauth_session.promptUserAuthorization(google_scopes, redirect, origin);
      return !!rv;
    },

    /**
       @variable Session.Authorized
       @summary An [sjs:observable::Observable] indicating the Google API authorization status ('true', 'false')
     */
    Authorized: google_oauth_session.Authorized,

    /**
       @function Session.photos
       @summary Returns a [sjs:sequence::Stream] of 288x288 recent Google photos 
    */
    photos: function(filter) {
      // size is hardcoded
      return @batchN(20) ::
        @Stream(function(r) {
          var photos = google_oauth_session .. @picasa.recentPhotos({
            thumbsize:'750c',
            q:filter
          });
          photos .. @each {
            |entry|
            // return the largest thumbnail
            var thumbnail = entry["media$group"]["media$thumbnail"] .. @find(item -> item.height == 750 || item.width == 750, null);
            if (thumbnail)
              r(thumbnail);
          }
        });
    },

    /**
       @function Session.createStory
       @summary Create a new story owned by the session user
    */
    createStory: -> user .. @stories.createStory(),

    /**
       @function Session.Stories
       @summary Return an [sjs:observable::Observable] yielding a [sjs:sequence::Stream] of the ids of all stories of the session user
    */
    Stories: -> user .. @users.Stories(),

    /**
       @function Session.StoryData
       @param {String} [story_id]
       @summary Return an [sjs:observable::Observable] yielding the data for the given story
    */ 
    StoryData: story_id -> story_id .. @stories.Data(user),

    /**
       @function Session.modifyStory
       @param {String} [story_id]
       @param {Object} [data]
       @summary Save the given data as the new story data
    */
    modifyStory: (story_id, data) -> story_id .. @stories.modifyStory(data, user)
    
  };
};
