/**
   @summary Main application API
   @desc
     **NB** To facilitate operation across temporary server disconnects, all
     functions exposed in the API should be idempotent.
*/


@ = require([
  'mho:std',
  {id: 'lib:app-info', name: 'app_info'},
  {id: 'backend:google-photos', name: 'google_photos'},
  {id: 'backend:db/users', name: 'users'},
  {id: 'backend:db/stories', name: 'stories'},
  {id: 'backend:google-accounts', name: 'google_accounts'}
]);

/**
   @variable api_version
   @summary API version
*/
exports.api_version = @app_info.version;

/**
   @function getPublicStory
   @summary XXX write me
*/
exports.getPublicStory = function(story_id) {
  return @stories.getPublicStory(story_id);
};

/**
   @function loginGoogle
   @summary Perform a Google OAuth authentication
   @param {String} [origin] Pass `window.location.origin` here
   @param {Function} [redirect] Client-side redirect function that will receive the OAuth URL
   @return {String|false} Credentials string if the authentication was successful; `false` otherwise
*/
exports.loginGoogle = @google_accounts.login;

/**
   @class Session
   @summary A user api session
   @function Session
   @param {String} [origin] Pass `window.location.origin` here
   @param {String} [credentials] Credentials string
   @summary Try to obtain a session for the given credentials
   @return {::Session} Session object, or throws if unsuccessful
*/
exports.Session = function(origin, credentials) {

  var user;
  if (!(user = @users.verifyAccount(credentials))) {
    throw new Error("Account verification failed");
  }  
  
  var google_oauth_session = @env('services').google_api_oauth.APISession(
    user .. @users.getCredentials('google_tokens')
  );


  return {
    /**
       @variable user
       @summary Username of authenticated user
    */
    user: user,

    /**
       @function Session.authorizeGoogle
       @param {Function} [redirect] client-side redirection function
       @summary Perform Google OAuth authorization to photos API (e.g. in case permissions were revoked - see [::Session::Authorized])
    */ 
    authorizeGoogle: function(redirect) {
      var rv = google_oauth_session.promptUserAuthorization(google_scopes, redirect, origin);
      return !!rv;
    },

    /**
       @variable Session.Authorized
       @summary An [sjs:observable::Observable] indicating the Google API authorization status ('true', 'false')
     */
    Authorized: google_oauth_session.Authorized,

    /**
       @function Session.photos
       @summary Returns a [sjs:sequence::Stream] of 288x288 recent Google photos 
    */
    photos: filter -> @google_photos.query(google_oauth_session, {filter: filter}),


    /**
       @function Session.createStory
       @summary Create a new story owned by the session user
    */
    createStory: -> user .. @stories.createStory(),

    /**
       @function Session.Stories
       @summary Return an [sjs:observable::Observable] yielding a [sjs:sequence::Stream] of the ids of all stories of the session user
    */
    Stories: -> user .. @users.Stories(),

    /**
       @function Session.StoryData
       @param {String} [story_id]
       @summary Return an [sjs:observable::Observable] yielding the data for the given story
    */ 
    StoryData: story_id -> story_id .. @stories.Data(user),

    /**
       @function Session.modifyStory
       @param {String} [story_id]
       @param {Object} [data]
       @summary Save the given data as the new story data
    */
    modifyStory: (story_id, data) -> story_id .. @stories.modifyStory(data, user)
    
  };
};
